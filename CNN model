import pandas as pd
import csv
import numpy.ma as ma
from keras.layers import BatchNormalization
from keras.utils import np_utils
import numpy as np
import matplotlib
from matplotlib import pyplot as plt
from keras.models import Sequential
from keras.layers.core import Dense, Dropout, Activation, Flatten
from keras.layers.convolutional import Conv2D, MaxPooling2D
from keras.callbacks import ModelCheckpoint
from keras.optimizers import SGD
import itertools
from mpl_toolkits.axes_grid1 import make_axes_locatable
import matplotlib.cm as cm
import pylab as pl

import theano
from sklearn.metrics import confusion_matrix
np.random.seed(16874)  # for reproducibility


train_file = "train.csv"
public_test_file = "publicTest.csv"
private_test_file = "privateTest.csv"
batch_size = 128
nb_classes = 7
nb_epoch = 25

# input image dimensions
img_rows, img_cols = 48, 48
# number of convolutional filters to use
nb_filters = 32
# size of pooling area for max pooling
nb_pool = 2
# convolution kernel size
nb_conv = 3

class_names = ['Злость', 'Отвращение','Страх', 'Счастье', 'Грусть', 'Удивление','Нейтральная']

def plot_confusion_matrix(cm, classes, normalize=False, title='Confusion matrix', cmap=plt.cm.Blues):
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Нормализированная матрица несоответствий")
    else:
        print('Матрица несоответствий без нормализации значений')

    print(cm)

    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, cm[i, j], horizontalalignment="center", color="white" if cm[i, j] > thresh else "black")
    plt.tight_layout()
    plt.ylabel('Истиные метки')
    plt.xlabel('Спрогнозированные метки')

def separate_csv():
    csvr = csv.reader(open('fer2013.csv'))
    header = next(csvr)
    rows = [row for row in csvr]

    trn = [row[:-1] for row in rows if row[-1] == 'Training']
    csv.writer(open('train.csv', 'w+')).writerows([header[:-1]] + trn)
    print(len(trn))

    tst = [row[:-1] for row in rows if row[-1] == 'PublicTest']
    csv.writer(open('publicTest.csv', 'w+')).writerows([header[:-1]] + tst)
    print(len(tst))

    tst2 = [row[:-1] for row in rows if row[-1] == 'PrivateTest']
    csv.writer(open('privateTest.csv', 'w+')).writerows([header[:-1]] + tst2)
    print(len(tst2))

def load_data(filename):
    x = pd.read_csv(filename)
    data = x.values
    # print(data.shape)
    # print(data[0, 0])
    y = data[:, 0]
    pixels = data[:, 1]
    # print(type(pixels))
    # print(len(pixels[0]))
    # print(pixels[10][10])
    X = np.zeros((pixels.shape[0], 48 * 48))

    for ix in range(X.shape[0]):
        p = pixels[ix].split(' ')
        for iy in range(X.shape[1]):
            X[ix, iy] = int(p[iy])
    X /=255
    return(X, y)


(X_train, y_train) = load_data(train_file)
(X_pbl_test, y_pbl_test) = load_data(public_test_file)
(X_valid, y_valid) = load_data(private_test_file)

Y_train = np_utils.to_categorical(y_train, nb_classes)
Y_test = np_utils.to_categorical(y_pbl_test, nb_classes)
Y_valid = np_utils.to_categorical(y_valid, nb_classes)


X_train = X_train.reshape(X_train.shape[0], img_rows, img_cols, 1)
X_pbl_test = X_pbl_test.reshape(X_pbl_test.shape[0], img_rows, img_cols, 1)
X_valid = X_valid.reshape(X_valid.shape[0], img_rows, img_cols, 1)

# print(X_train.shape)
# print(X_pbl_test.shape)
# print(X_train)

# Создаем последовательную модель
model = Sequential()

model.add(Conv2D(32, (3, 3), padding='same', input_shape=(48, 48, 1)))
convout1 = Activation('relu')
model.add(convout1)
model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.2))

model.add(Conv2D(64, (3, 3), padding='same'))
model.add(Activation('relu'))
model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.2))

model.add(Conv2D(128, (3, 3), padding='same'))
model.add(Activation('relu'))
model.add(Conv2D(128, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.2))

# Слой преобразования данных из 2D представления в плоское
model.add(Flatten())
# Полносвязный слой для классификации
model.add(Dense(512))
model.add(BatchNormalization())
model.add(Activation('relu'))
# Слой регуляризации Dropout
model.add(Dropout(0.4))
# Выходной полносвязный слой
model.add(Dense(nb_classes))
# model.add(BatchNormalization())
model.add(Activation('softmax'))

# Задаем параметры оптимизации
sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)
model.load_weights('checkpointBN-24-0.76-0.63-0.66-1.10.hdf5')
model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])
filepath='checkpointBN-{epoch:02d}-{acc:.2f}-{val_acc:.2f}-{loss:.2f}-{val_loss:.2f}.hdf5'
checkpoint = ModelCheckpoint(filepath, monitor='val_acc', verbose=1, save_best_only=False, mode='auto')
model.summary()
model.save("BN.h5")

# Обучаем модель
model.fit(X_train, Y_train, batch_size=batch_size, epochs=nb_epoch, callbacks=[checkpoint], validation_data=(X_pbl_test, Y_test), shuffle=True)

# Оцениваем качество обучения модели на тестовых данных
scores = model.evaluate(X_pbl_test, Y_test, verbose=0)
print("Точность работы на тестовых данных: %.2f%%" % (scores[1]*100))

scores = model.evaluate(X_valid, Y_valid, verbose=0)
print("Точность работы на проверочных данных: %.2f%%" % (scores[1]*100))

json_string = model.to_json()
with open("model.json", "w") as json_file:
    json_file.write(json_string)

# Prediction
y_predict = model.predict(X_valid)
print(y_predict)

print('Y_valid')
print(Y_valid)

y_predict = y_predict.argmax(1)

Y_valid = Y_valid.argmax(1)

# Compute confusion matrix
cnf_matrix = confusion_matrix(Y_valid, y_predict)
np.set_printoptions(precision=2)

# Plot non-normalized confusion matrix
plt.figure()
plot_confusion_matrix(cnf_matrix, classes=class_names, title='Матрица несоответствий без нормализации значений')

# Plot normalized confusion matrix
plt.figure()
plot_confusion_matrix(cnf_matrix, classes=class_names, normalize=True, title='Нормализированная матрица несоответствий')
plt.show()
